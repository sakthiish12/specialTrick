name: Security Scan

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run Snyk for dependency scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
        continue-on-error: true
        with:
          args: --severity-threshold=high

      # Run OWASP ZAP scan
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'https://staging.portfolio-g8.vercel.app'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      # Run SonarQube analysis
      - name: Run SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || '' }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || '' }}
        continue-on-error: true

      # Run npm audit
      - name: Run npm audit
        run: npm audit --production

      # Run SAST (Static Application Security Testing)
      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

      # Run container scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'portfolio-g8:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Run secret scanning
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.0.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      # Run dependency scanning
      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Portfolio G8'
          path: '.'
          format: 'HTML'
          out: 'reports'

      # Skip uploading security reports to avoid GitHub Actions issues
      - name: List security reports
        run: |
          echo "Security reports generated:"
          ls -la reports/ || echo "No reports directory found"
          ls -la .zap/results/ || echo "No ZAP results directory found"
          ls -la .snyk || echo "No Snyk report found"

      # Notify on critical findings
      - name: Notify on critical findings
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reports = fs.readdirSync('reports');
            const criticalFindings = reports.filter(report => 
              report.includes('critical') || report.includes('high')
            );
            
            if (criticalFindings.length > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Critical Security Findings Detected',
                body: `Critical security findings detected in the following reports:\n${criticalFindings.join('\n')}\n\nPlease review the security reports in the workflow artifacts.`
              });
            } 